#
# For full config options, check the docs:
#    docs.serverless.com
#

service: omni-method-api
# app and org for use with dashboard.serverless.com
app: omni-method-api
org: shmorty

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"
configValidationMode: error

package:
  patterns:
    - "!src/data/**"

provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs12.x
  stage: ${opt:stage, 'uat'}

  # lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  #  iam:
  #    role:
  #      statements:
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:ListBucket"
  #          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:PutObject"
  #          Resource:
  #            Fn::Join:
  #              - ""
  #              - - "arn:aws:s3:::"
  #                - "Ref" : "ServerlessDeploymentBucket"
  #                - "/*"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            # - "dynamodb:BatchGetItem"
            # - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["OmniMethodTable", "Arn"] }

  environment:
    TABLE_NAME: { Ref: OmniMethodTable }

  # you can add packaging information here
  #package:
  #  patterns:
  #    - '!exclude-me.js'
  #    - '!exclude-me-dir/**'
  #    - include-me.js
  #    - include-me-dir/**

  httpApi:
    cors: true

functions:
  getUsers:
    handler: src/handlers/users.getUsers
    events:
      - httpApi:
          path: /users
          method: get
  addUser:
    handler: src/handlers/users.addUser
    events:
      - httpApi:
          path: /users
          method: post
  getUserScores:
    handler: src/handlers/users.getUserScores
    events:
      - httpApi:
          path: /users/{id}
          method: get
  getScores:
    handler: src/handlers/users.getScores
    events:
      - httpApi:
          path: /users/{id}/scores
          method: get
  addScore:
    handler: src/handlers/users.addScore
    url:
      cors: true
    events:
      - httpApi:
          path: /users/{id}/scores
          method: post
  delScore:
    handler: src/handlers/users.deleteScore
    url:
      cors: true
    events:
      - httpApi:
          path: /users/{id}/scores
          method: delete
  addCategory:
    handler: src/handlers/assessments.addCategory
    events:
      - httpApi:
          path: /assessments/categories
          method: post
  getCategories:
    handler: src/handlers/assessments.getCategories
    events:
      - httpApi:
          path: /categories
          method: get
  getAssessments:
    handler: src/handlers/assessments.getAssessments
    events:
      - httpApi:
          path: /assessments
          method: get
  addAssessment:
    handler: src/handlers/assessments.addAssessment
    events:
      - httpApi:
          path: /assessments
          method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-plugin-typescript
  # - serverless-offline

resources:
  Resources:
    OmniMethodTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OmniMethodTable
        BillingMode: "PAY_PER_REQUEST"
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 0
        #   WriteCapacityUnits: 0
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          # - AttributeName: "GSI1PK"
          #   AttributeType: "S"
          # - AttributeName: "GSI1SK"
          #   AttributeType: "S"
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        # GlobalSecondaryIndexes:
        #   - IndexName: "GSI1"
        #     KeySchema:
        #       - AttributeName: "GSI1PK"
        #         KeyType: "HASH"
        #       - AttributeName: "GSI1SK"
        #         KeyType: "RANGE"
        #     Projection:
        #       ProjectionType: ALL
